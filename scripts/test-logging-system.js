const axios = require('axios');

const API_BASE_URL = 'http://localhost:3000/api';

async function testLoggingSystem() {
	console.log('üîç Iniciando pruebas del sistema de logging mejorado\n');

	try {
		// 1. Verificar que el backend est√© funcionando
		console.log('üì° Verificando estado del backend...');
		const healthResponse = await axios.get(`${API_BASE_URL}/health`);
		console.log('‚úÖ Backend funcionando:', healthResponse.status);

		// 2. Probar diferentes tipos de requests para generar logs
		console.log('\nüìù Generando logs de diferentes tipos...');

		// Request exitoso
		console.log('   - Request exitoso...');
		await axios.get(`${API_BASE_URL}/health`);

		// Request con error 404
		console.log('   - Request con error 404...');
		try {
			await axios.get(`${API_BASE_URL}/endpoint-inexistente`);
		} catch (error) {
			// Esperado
		}

		// Request con error de validaci√≥n
		console.log('   - Request con error de validaci√≥n...');
		try {
			await axios.post(`${API_BASE_URL}/v1/projects`, {
				// Datos inv√°lidos
			});
		} catch (error) {
			// Esperado
		}

		// 3. Verificar logs en archivo
		console.log('\nüìÅ Verificando archivos de log...');
		const fs = require('fs');
		const path = require('path');

		const logPath = path.join(
			__dirname,
			'../calculadora-electrica-backend/logs/app.log'
		);

		if (fs.existsSync(logPath)) {
			const logContent = fs.readFileSync(logPath, 'utf8');
			const logLines = logContent.split('\n').filter((line) => line.trim());

			console.log(`‚úÖ Archivo de log encontrado: ${logPath}`);
			console.log(`   - L√≠neas de log: ${logLines.length}`);

			// Mostrar √∫ltimos 5 logs
			const recentLogs = logLines.slice(-5);
			console.log('\nüìã √öltimos 5 logs:');
			recentLogs.forEach((log, index) => {
				try {
					const parsed = JSON.parse(log);
					console.log(`   ${index + 1}. [${parsed.level}] ${parsed.message}`);
					if (parsed.requestId)
						console.log(`      Request ID: ${parsed.requestId}`);
					if (parsed.duration)
						console.log(`      Duraci√≥n: ${parsed.duration}`);
				} catch {
					console.log(`   ${index + 1}. ${log.substring(0, 100)}...`);
				}
			});
		} else {
			console.log('‚ö†Ô∏è  Archivo de log no encontrado. Verificar configuraci√≥n.');
		}

		// 4. Verificar logs en consola
		console.log('\nüñ•Ô∏è  Verificar logs en consola del backend:');
		console.log('   - Los logs deben aparecer en la consola del backend');
		console.log('   - Formato: JSON estructurado con timestamps');
		console.log('   - Niveles: debug, info, warn, error');
		console.log('   - Incluir: requestId, method, url, duration, statusCode');

		// 5. Resumen del sistema implementado
		console.log('\nüéâ Sistema de logging mejorado implementado exitosamente!');
		console.log('\nüìã Caracter√≠sticas implementadas:');
		console.log('   ‚úÖ Logger centralizado con Pino');
		console.log('   ‚úÖ Logs estructurados en JSON');
		console.log('   ‚úÖ Logs a archivo y consola');
		console.log('   ‚úÖ Rotaci√≥n autom√°tica de logs');
		console.log('   ‚úÖ Sanitizaci√≥n de datos sensibles');
		console.log('   ‚úÖ Trace IDs para correlaci√≥n');
		console.log('   ‚úÖ M√©todos especializados por tipo de log');
		console.log('   ‚úÖ Configuraci√≥n por environment');
		console.log('   ‚úÖ Logs de auditor√≠a de seguridad');
		console.log('   ‚úÖ M√©tricas de performance');

		console.log('\nüîß Configuraci√≥n actual:');
		console.log('   - Nivel de log: DEBUG');
		console.log('   - Archivo habilitado: S√ç');
		console.log('   - Ruta del archivo: ./logs/app.log');
		console.log('   - Rotaci√≥n: Diaria, m√°ximo 30 archivos');
		console.log('   - Tama√±o m√°ximo: 10MB por archivo');

		console.log('\nüìä URLs para monitoreo:');
		console.log(`   - Backend Health: ${API_BASE_URL}/health`);
		console.log(`   - Swagger Docs: http://localhost:3000/api/docs`);
		console.log(`   - M√©tricas: http://localhost:3000/api/metrics`);
	} catch (error) {
		console.error('‚ùå Error durante las pruebas:', error.message);
		if (error.response) {
			console.error('   Status:', error.response.status);
			console.error('   Data:', error.response.data);
		}
	}
}

// Ejecutar pruebas
if (require.main === module) {
	testLoggingSystem();
}

module.exports = { testLoggingSystem };
